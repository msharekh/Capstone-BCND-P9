// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');

contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];

    let proofJSON = {
        "proof": {
            "a": [
                "0x07743429b6f3bdd9bf3b2bcd650d98c302302a14122e3b778e11ad8d303ed5cc",
                "0x18c496895293f4eba35359e65f729e11db813b3ca00d5c32823a26933813f56e"
            ],
            "b": [
                [
                    "0x15cffb2429463efc39a5cc5be0a05d512e70e385f2be6d5c99cda10bd8d74ea7",
                    "0x051158ef78abe3ca4fa4cb2700b7d82cffae83560ee019777a306242a19ea431"
                ],
                [
                    "0x141ea824aa4eb17dd6dab6000351d3474bbcaeb25aaf543f6ea79b7ecb824db6",
                    "0x0703ac1eda6b82c131e47be24f0f43e33cc6f21b1cb8fc112099bb8684d59d11"
                ]
            ],
            "c": [
                "0x09a8ea713d2f50856c5435e200bb349d8185cc9933e887d95dcf4934452e357f",
                "0x2516bb01d0c751ff748531dcd6e9640ea8a17b88b0461ab5df16fbc3e544e957"
            ]
        },
        "inputs": [
            "0x0000000000000000000000000000000000000000000000000000000000000009",
            "0x0000000000000000000000000000000000000000000000000000000000000001"
        ]
    };

    // function verifyTx(
    //     uint[2] memory a,
    //     uint[2][2] memory b,
    //     uint[2] memory c,
    //     uint[2] memory input
    // ) public returns (bool r) {

    describe('Test verification', function () {
        beforeEach(async function () {
            this.contract = await SquareVerifier.new({ from: account_one });

            console.log('START....');

        })

        it('(7) .... Test verification with correct proof', async function () {

            let a, b, c, input
            a = proofJSON.proof.a;
            b = proofJSON.proof.b;
            c = proofJSON.proof.a;
            input = proofJSON.inputs;
            console.log('a', ':	', a);
            console.log('input', ':	', input);

            let result = await this.contract.verifyTx(a, b, c, input);
            console.log('result', ':	', result);

            assert.equal(result, true, "not correct proof")

        })
        // - use the contents from proof.json generated from zokrates steps


        // Test verification with incorrect proof
        it('(8) .... Test verification with incorrect proof', async function () {

        })
    });
})
// Test verification with correct proof
